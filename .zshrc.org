#PS1="[\u@\h \W]\$ "

# ---------------------------
# General Settings
# ---------------------------
export PATH=/Applications/gnuplot.app:/Applications/gnuplot.app/bin:$HOME/bin:$PATH
export EDITOR=/Applications/MacVim.app/Contents/MacOS/Vim
export KCODE=u
export AUTOFEATURE=true
export LANG=ja_JP.UTF-8

bindkey -v

setopt no_beep
setopt auto_cd
setopt auto_pushd
setopt correct
setopt magic_equal_subst
setopt notify
setopt equals

### Complement ###
autoload -U compinit; compinit
setopt auto_list
setopt auto_menu
setopt list_packed
setopt list_types
bindkey "^[[Z" reverse-menu-complete
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

### Glob ###
setopt extended_glob
unsetopt caseglob

### History ###
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt bang_hist
setopt extended_history
setopt hist_ignore_dups
setopt share_history
setopt hist_reduce_blanks

# マッチしたコマンドのヒストリを表示できるようにする
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

# すべてのヒストリを表示する
function hitory-all { history -E 1 }

### alias ###
alias vi='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
alias vim='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
alias ls='ls -GF'
alias ll='ls -l'
alias la='ls -a'
alias rm='rm -i'
alias mi="open -a mi"
alias emacs="open -a Emacs"
#alias gnuplot="GNUTERM=aqua /usr/local/bin/gnuplot"
#alias gnuplot="/usr/local/bin/gnuplot"
alias gnuplot="GNUTERM=aqua /opt/local/bin/gnuplot"
alias octave="/Applications/Octave.app/Contents/Resources/bin/octave"
alias chrome="open -a /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome/"
#alias tmux="tmuxx"

# ---------------------------
# Look And Feel Settings
# ---------------------------
### Ls Color ###
# 色の設定
export LSCOLORS=Exfxcxdxbxegedabagacad
# 補完時の色の設定
export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
# ZLS_COLORSとは？
export ZLS_COLORS=$LS_COLORS
# lsコマンド時、自動で色がつく(ls -Gのようなもの？)
export CLICOLOR=true
# 補完候補に色を付ける
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

### Prompt ###
# プロンプトに色を付ける
autoload -U colors; colors
# 一般ユーザ時
tmp_prompt="%{${fg[cyan]}%}%n%# %{${reset_color}%}"
tmp_prompt2="%{${fg[cyan]}%}%_> %{${reset_color}%}"
tmp_rprompt="%{${fg[green]}%}[%~]%{${reset_color}%}"
tmp_sprompt="%{${fg[yellow]}%}%r is correct? [Yes, No, Abort, Edit]:%{${reset_color}%}"

if [ ${UID} -eq 0 ]; then
	tmp_prompt="%B%U${tmp_prompt}%u%b"
	tmp_prompt2="%B%U${tmp_prompt2}%u%b"
	tmp_rprompt="%B%U${tmp_rprompt}%u%b"
	tmp_sprompt="%B%U${tmp_sprompt}%u%b"
fi

PROMPT=$tmp_prompt
PROMPT2=$tmp_prompt2
RPROMPT=$tmp_rprompt
SPROMPT=$tmp_sprompt
# SSHログイン時のプロンプト
[ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
	PROMPT="%{${fg[white]}%}${HOST%%.*}${PROMPT}"
;

# For tmux-powerline
TMUX_POWERLINE_PROMPT_INFO='$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'
DEFAULT_PROMPT+=$TMUX_POWERLINE_PROMPT_INFO

PROMPT+=$DEFAULT_PROMPT

### Title (user@hostname) ###
case "${TERM}" in
kterm*|xterm*|)
	precmd() {
		echo -ne "\033]0;${USER}@${HOST%%.*}\007"
	}
	;;
esac

# ---------------------------
# Other Settings
# ---------------------------
### RVM ###
#if [[ -s ~/.rvm/scripts/rvm ]]; then source ~/.rvm/scripts/rvm; fi

### Macports ###
case "${OSTYPE}" in
	darwin*)
		export PATH=/opt/local/bin:/opt/local/sbin/:$PATH
		export MANPATH=/opt/local/share/man:/opt/local/man:$MANPATH
	;;
esac

### rbenv ###
PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

### w3mでgoogle検索
function google() {
local str opt
if [ $ != 0 ]; then
  for i in $*; do
    str="$str+$i"
  done
  str=`echo  $str | sed 's/^\+//'`
  opt='search?num=50&hl=ja&lr=lang_ja'
  opt="${opt}&q=${str}"
fi
w3m http://www.google.co.jp/$opt
}


### tmux自動起動
if [ -z "$TMUX" -a -z "$STY" ]; then
    if type tmuxx >/dev/null 2>&1; then
        tmuxx
    elif type tmux >/dev/null 2>&1; then
        if tmux has-session && tmux list-sessions | /usr/bin/grep -qE '.*]$'; then
            tmux attach && echo "tmux attached session "
        else
            tmux new-session && echo "tmux created new session"
        fi
    elif type screen >/dev/null 2>&1; then
        screen -rx || screen -D -RR
    fi
fi

#. ~/.vim/bundle/powerline/powerline/bindings/zsh/powerline.zsh

function chpwd() {
  touch ~/dotfiles/dir0.txt && \rm ~/dotfiles/dir0.txt && echo $PWD > ~/dotfiles/dir0.txt
}
